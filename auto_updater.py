import sys, os, subprocess
from enum import Enum
from lib.getNewFunc import getNewFunc

CODE_FILE = -1
Debug = True  # change to True for debug prints

if "--m2c-path" in sys.argv:
    m2c_path = sys.argv[sys.argv.index("--m2c-path") + 1]
    print(m2c_path)
srcRepoPath = sys.argv[CODE_FILE].split("src")[0]


def getFileName(_file):
    return _file.split("/")[-1].split(".")[0]

def getGlobalAsmFile(_file):
    return _file.replace('"', " ").split()[1]


def getFuncName(_str):
    temp = (
        _str.replace("(", " ")
        .replace(":", " ")
        .replace("*", " ")
        .replace(")", " ")
        .split()
    )
    return "".join([i for i in temp if "func_" in i])


process = subprocess.Popen(
    "git ls-files -s mips_to_c/", shell=True, stdout=subprocess.PIPE
)
mips_to_c_version = process.communicate()
mips_to_c_version = mips_to_c_version[0].decode("ascii").split()[1]

if Debug:
    print(mips_to_c_version)

# file bounds constants
START = 0
END = 1

funcBounds = {}
global_asm_lookup = {}  # just in case

# Pass 1: populate data structures

fileName = os.getcwd() + "/tmp/" + getFileName(sys.argv[-1]) + ".c"
inFile = open(sys.argv[CODE_FILE], "r")
fileBuffer = inFile.readlines()
inFile.close()
inFile = open(sys.argv[CODE_FILE], "r")

ifdef_line = 1
global_asm_file = 1
end_line = 1

funcName = ""

lineNum = 0

inFunc = 0

for line in inFile:
    if "//" in line:
        lineNum += 1
        continue
    if "#ifdef" in line:
        inFunc = 1
        ifdef_line = lineNum
    if "func_" in line and (lineNum - ifdef_line == 2):
        print(line)
        funcName = getFuncName(line)
    if "GLOBAL_ASM" in line:
        global_asm_file = getGlobalAsmFile(line)
    if "#endif" in line and inFunc == 1:
        inFunc = 0
        funcBounds[funcName] = [ifdef_line, lineNum]
        global_asm_lookup[funcName] = global_asm_file
    lineNum += 1

if Debug:
    print(funcBounds)
    print(global_asm_lookup)


toDel = []
# Pass 2: filter out functions that are up to date
for sym in funcBounds:
    temp = funcBounds[sym]
    # TODO: have a way to force this
    # (if one wants to update a specific function automatically, or to reset a func)
    if "mips_to_c commit" in fileBuffer[temp[START] + 1]:
        commit = fileBuffer[temp[START] + 1].split()[-1]
        if commit == mips_to_c_version:
            toDel.append(sym)
            del global_asm_lookup[sym]
for i in toDel:
    del funcBounds[i]

if Debug:
    print(funcBounds)
    print(global_asm_lookup)

# Pass 3: Write the new file and place new functions
startLine = 0
outFile = open(sys.argv[CODE_FILE], "w+")
for sym in funcBounds:
    tmp = funcBounds[sym]
    outFile.write("".join(fileBuffer[startLine : tmp[START]]))
    startLine = tmp[END]
    outFile.write("#ifdef MIPS_TO_C\n")
    outFile.write("// generated by mips_to_c commit " + mips_to_c_version + "\n")
    x = getNewFunc(srcRepoPath + global_asm_lookup[sym])
    outFile.write(x)
    outFile.write("#else\n")
    outFile.write('GLOBAL_ASM("' + global_asm_lookup[sym] + '")\n')

# flush
outFile.write("".join(fileBuffer[startLine:]))

outFile.close()
